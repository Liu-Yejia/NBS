fun_cabocha_predicate_searching_뉴<-function(input){  # input <- "18歳以下の子どもを対象にした10万円相当の給付策で、岸田文雄首相が所得制限を「世帯主ごと（の年収）で判断する」と  # 述べたことについて、松野博一官房長官は16日の会見で「児童手当における所得制限と同様、主たる生計維持者の収入を基準として  # 判断されることになる」と述べ、世帯の中で所得が最も高い人の年収で判断すると修正した。"  # input <- "彼は学生だ。象は鼻が長い。この地域の気候は、温暖だ。明日は雪が降る。"  # input <- x_1  library(stringr)  fun_연속<-function(x, n=2){    # library(stringr)    len<-x|>length()    L<-list()    머리<-1    꼬리<-len-n+1    for(i in 1:n){      지금_범위<-머리:꼬리      L[[i]]<-x[지금_범위]      머리<-머리+1      꼬리<-꼬리+1    }    res<-L[[1]]    for(i in 2:n){      res<-str_c(res, L[[i]], sep="_")    }    return(res)  }  if(str_detect(input, "[\n 　]")){    input<-input |> str_remove_all("\n") |> str_remove_all("[ 　]")  }  input<-chartr(old = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&()",                new = "０１２３４５６７８９ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ＆（）",                input)  if(str_detect(input, "[。！？]")){    punctuation_marks<-input |> str_extract_all("[。！？]") |> unlist()    sentences_pool<-input |> str_split("[。！？]") |> unlist() |> head(-1) # %>% paste0(punctuation_marks)  }else{    sentences_pool<-input  }  len_sen<-sentences_pool |> length()  predicate_vec<-character()  압축후글못<-character()  이차원<-list()  연속_이차원<-list()  단순한집계<-list() # 새 방법.  for(i in 1:len_sen){    command<-paste("echo", sentences_pool[i], "| cabocha")    completed<-command |> system(intern=TRUE) |> str_replace_all(" +", "") |> str_replace_all("-+.+$", "") |> head(-1)    command_1<-paste("echo", sentences_pool[i], "| cabocha -f1")    completed_1<-command_1 |> system(intern=TRUE)    completed_1<-completed_1[completed_1 |> str_detect("^\\*")]    completed_1<-completed_1 |> str_split_fixed(" ", 5)    completed_1_df<-as.data.frame(completed_1)    completed_1_df[, 3]<-str_remove_all(completed_1_df[, 3], "D")    predicate_num<-which(completed_1_df[,3]==-1)    연결용부품번호<-which(completed_1_df[,3]==completed_1_df[predicate_num, 2]) |> c(predicate_num)    predicate<-completed[predicate_num]    predicate_vec<-c(predicate_vec, predicate)    압축후글<-paste0(completed[연결용부품번호], collapse = "")    압축후글못<-c(압축후글못, 압축후글)    단순한집계[[i]]<-completed[연결용부품번호]    if(length(연결용부품번호)>2){      이차원[[i]]<-paste0(completed[head(연결용부품번호, -1)], predicate)      연속_이차원[[i]]<-completed[연결용부품번호]|>fun_연속()    }else{      이차원[[i]]<-paste0(completed[연결용부품번호], collapse="_")->연속_이차원[[i]]    }  }  list(述語ベクトル = predicate_vec, # 述语集       圧縮後文プール = 압축후글못, # 缩句后句子集：保留与述语文节直接接续的文节，将其于述语文节连接，得一核心句，即缩句后句子。       二文節の組合せ = unlist(이차원), # 缩句后句子的成分间的组合(1): 将"与述语文节直接接续的文节"和"述语文节"一一按序结合，得"部分句"集。       連続二文節の組合せ = unlist(연속_이차원),       コア = unlist(단순한집계)) # (2): 对core文节（述语文节和与其直接相连接的各文节），将其按文中原序排列后切取N-gram。默认N为2。  # return(predicate_vec)  # num_phrase_patterns<-length(completed)}